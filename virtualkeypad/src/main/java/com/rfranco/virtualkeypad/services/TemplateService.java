package com.rfranco.virtualkeypad.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.rfranco.virtualkeypad.autogenerated.dtos.EnumSortDirection;
import com.rfranco.virtualkeypad.autogenerated.dtos.TemplateRequest;
import com.rfranco.virtualkeypad.autogenerated.dtos.TemplateResponse;
import com.rfranco.virtualkeypad.autogenerated.dtos.TokenResponse;
import com.rfranco.virtualkeypad.exceptions.CannotPerformOperationException;
import com.rfranco.virtualkeypad.exceptions.InternalServerException;
import com.rfranco.virtualkeypad.exceptions.NotFoundException;
import com.rfranco.virtualkeypad.models.TemplateModel;
import com.rfranco.virtualkeypad.models.UserModel;
import com.rfranco.virtualkeypad.repositories.TemplateRepository;
import com.rfranco.virtualkeypad.repositories.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Service
public class TemplateService {
    @Autowired
    private TemplateRepository templaterepository;

    @Autowired
    private UserService userService;

    @Autowired
    private UserRepository userRepository;
    public void deleteTemplate(Integer userId, Integer templateId){
        if(!checkTemplateAndUser(userId,templateId)){
            log.error("User or template not found in the system");
            throw new NotFoundException("User or template not found in the system");
        }else {
            try {
                this.templaterepository.deleteById((long) templateId);
            } catch (CannotPerformOperationException ex) {
                log.error("Error trying to delete the template with id {}", templateId);
                throw new CannotPerformOperationException("Error trying to delete the template");
            }
        }
    }

    public void createTemplate(Integer userId, TemplateRequest template) throws JsonProcessingException {

        ObjectMapper mapper = new ObjectMapper();
        if(this.userService.getUser(userId) == null){
            log.error("User with id {} not found in the system",userId);
            throw new NotFoundException("User not found in the system");
        }
        try {
            TemplateModel templatemodel = TemplateModel.builder()
                    .user(this.userService.getUser(userId).get())
                    .name(template.getName())
                    .background(template.getBackgroundimage())
                    .image(template.getImage())
                    .creationdate(template.getCreationdate())
                    .buttons(mapper.writeValueAsString(template.getButtons()))
                    .texts(mapper.writeValueAsString((template.getTexts()))).build();

            this.templaterepository.save(templatemodel);
        }catch (Exception e){
            log.error("Error creating the template", e);
            throw new InternalServerException("Error creating the template");
        }
    }

    public TemplateResponse getTemplate(Integer userId, Integer templateId) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        if(!checkTemplateAndUser(userId,templateId)){
            log.error("User or template not found in the system");
            throw new NotFoundException("User or template not found in the system");
        }
        TemplateModel model = this.templaterepository.findById((long)templateId).get();

        return generateTemplate(model,mapper);
    }

    public List<TemplateResponse> getTemplates(Integer userId, String templatename, LocalDate startdate, LocalDate enddate,String token, EnumSortDirection order) throws JsonProcessingException{
        ObjectMapper mapper = new ObjectMapper();
        if(this.userService.getUser(userId) == null){
            log.error("User with id {} not found in the system",userId);
            throw new NotFoundException("User not found in the system");
        }else{
            try {
                UserModel user = this.userService.getUser(userId).get();
                List<TemplateResponse> templatelist = new ArrayList<>();
                if(token != null && (templatename == null && (startdate == null || enddate == null))){
                    for(TemplateModel templateModel : user.getTemplateModelList()){
                        if(templateModel.getToken().equals(token)){
                            templatelist.add(generateTemplate(templateModel,mapper));
                        }
                    }
                    return templatelist;
                }else if(templatename == null && (startdate == null || enddate == null)){
                    for(TemplateModel templateModel : user.getTemplateModelList()){
                        templatelist.add(generateTemplate(templateModel,mapper));
                    }
                    return templatelist;
                }else if(startdate == null || enddate == null){
                    for(TemplateModel templateModel : user.getTemplateModelList()){
                        if(templateModel.getName().equals(templatename)){
                            templatelist.add(generateTemplate(templateModel,mapper));
                        }
                    }
                    return templatelist;
                }else if(templatename == null){
                    for(TemplateModel templateModel : user.getTemplateModelList()){
                        if(templateModel.getCreationdate().isBefore(enddate) && templateModel.getCreationdate().isAfter(startdate)){
                            templatelist.add(generateTemplate(templateModel,mapper));
                        }
                    }
                    //TODO:comprobar orden
                    return templatelist;
                }else{
                    for(TemplateModel templateModel : user.getTemplateModelList()){
                        if(templateModel.getName().equals(templatename) && (templateModel.getCreationdate().isBefore(enddate) && templateModel.getCreationdate().isAfter(startdate))){
                            templatelist.add(generateTemplate(templateModel,mapper));
                        }
                    }
                    //TODO:comprobar orden
                    return templatelist;
                }
            }catch (Exception e){
                log.error("Error getting templates information.", e);
                throw new InternalServerException("Error getting templates information");
            }
        }
    }

    public void updateTemplate(Integer userId, Integer templateId, TemplateResponse template) throws JsonProcessingException{
        ObjectMapper mapper = new ObjectMapper();
        if(!checkTemplateAndUser(userId,templateId)){
            log.error("User or template not found in the system");
            throw new NotFoundException("User or template not found in the system");
        }
        try {
            TemplateModel templatemodel = TemplateModel.builder()
                    .user(this.userService.getUser(userId).get())
                    .templateId(templateId)
                    .name(template.getName())
                    .background(template.getBackgroundimage())
                    .image(template.getImage())
                    .creationdate(template.getCreationdate())
                    .buttons(mapper.writeValueAsString(template.getButtons()))
                    .texts(mapper.writeValueAsString((template.getTexts())))
                    .build();


            this.templaterepository.save(templatemodel);
        }catch(Exception e){
            log.error("Error updating the template", e);
            throw new InternalServerException("Error updating the template");
        }
    }
    public boolean checkTemplateAndUser(Integer userId, Integer templateId){
        Optional<UserModel> userModel = this.userService.getUser(userId);
        if(userModel.isEmpty()){
            return false;
        }
        TemplateModel template = userModel.get().getTemplateModelList().stream().filter(i -> (long)templateId == i.getTemplateId())
                .findAny()
                .orElse(null);
        if(template==null){
            return false;
        }
        return true;
    }
    public TemplateResponse generateTemplate(TemplateModel model, ObjectMapper mapper) throws JsonProcessingException{
        TemplateResponse myTemplate = new TemplateResponse();
        myTemplate.setTemplateId((int)model.getTemplateId());
        myTemplate.setBackgroundimage(model.getBackground());
        myTemplate.setImage(model.getImage());
        myTemplate.setCreationdate(model.getCreationdate());
        myTemplate.setName(model.getName());
        myTemplate.setButtons(mapper.readValue(model.getButtons(),
                List.class));
        myTemplate.setTexts(mapper.readValue(model.getTexts(),
                List.class));

        return myTemplate;
    }

    public void deleteToken(Integer templateId, Integer userId){
        if(!checkTemplateAndUser(userId,templateId)){
            log.error("User or template not found in the system");
            throw new NotFoundException("User or template not found in the system");
        }else {
            try {
                TemplateModel templatemodel = this.templaterepository.findById((long)templateId).get();
                templatemodel.setToken(null);
                this.templaterepository.save(templatemodel);
            } catch (CannotPerformOperationException ex) {
                log.error("Error trying to delete the template with id {}", templateId);
                throw new CannotPerformOperationException("Error trying to delete the template");
            }
        }
    }
    public TokenResponse getToken(Integer templateId, Integer userId){
        if(!checkTemplateAndUser(userId,templateId)){
            log.error("User or template not found in the system");
            throw new NotFoundException("User or template not found in the system");
        }else {
            try {
                TemplateModel templatemodel = this.templaterepository.findById((long)templateId).get();
                TokenResponse token = new TokenResponse();
                token.setToken(templatemodel.getToken());
                return token;
            } catch (CannotPerformOperationException ex) {
                log.error("Error trying to delete the template with id {}", templateId);
                throw new CannotPerformOperationException("Error trying to delete the template");
            }
        }
    }
    public void createToken(Integer templateId, Integer userId){
        if(!checkTemplateAndUser(userId,templateId)){
            log.error("User or template not found in the system");
            throw new NotFoundException("User or template not found in the system");
        }else {
            try {
                TemplateModel templatemodel = this.templaterepository.findById((long)templateId).get();
                templatemodel.setToken(UUID. randomUUID().toString());
                this.templaterepository.save(templatemodel);
            } catch (CannotPerformOperationException ex) {
                log.error("Error trying to delete the token with templateid {}", templateId);
                throw new CannotPerformOperationException("Error trying to delete the token");
            }
        }
    }
}
