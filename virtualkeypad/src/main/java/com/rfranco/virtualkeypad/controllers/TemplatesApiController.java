package com.rfranco.virtualkeypad.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.rfranco.virtualkeypad.autogenerated.api.TemplatesApi;
import com.rfranco.virtualkeypad.autogenerated.dtos.EnumSortDirection;
import com.rfranco.virtualkeypad.autogenerated.dtos.TemplateRequest;
import com.rfranco.virtualkeypad.autogenerated.dtos.TemplateResponse;
import com.rfranco.virtualkeypad.autogenerated.dtos.TokenResponse;
import com.rfranco.virtualkeypad.exceptions.CannotPerformOperationException;
import com.rfranco.virtualkeypad.exceptions.InternalServerException;
import com.rfranco.virtualkeypad.services.TemplateService;
import com.rfranco.virtualkeypad.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;

import javax.validation.Valid;
import java.time.LocalDate;
import java.util.List;

@Controller
public class TemplatesApiController implements TemplatesApi {

    @Autowired
    private TemplateService templateService;

    @Autowired
    private UserService userService;

    @Override
    public ResponseEntity<Void> createTemplate(Integer userId, @Valid TemplateRequest template) {
        try {
            this.templateService.createTemplate(userId, template);
            return new ResponseEntity(HttpStatus.CREATED);
        }
        catch (JsonProcessingException ex){
            throw new InternalServerException("Error");
        }
    }
    @CrossOrigin
    @Override
    public ResponseEntity<Void> deleteTemplate(Integer templateId, Integer userId) {
        this.templateService.deleteTemplate(userId, templateId);
        return new ResponseEntity(HttpStatus.OK);
    }

    @Override
    public ResponseEntity<TemplateResponse> getTemplate(Integer templateId, Integer userId) {
        try {
            TemplateResponse template = this.templateService.getTemplate(userId, templateId);
            return new ResponseEntity(template, HttpStatus.OK);
        }
        catch (JsonProcessingException ex){
            throw new InternalServerException("Error processing JSON object");
        }
    }

    @Override
    public ResponseEntity<List<TemplateResponse>> getTemplates(Integer userId, String templatename, LocalDate startdate, LocalDate enddate, String token, EnumSortDirection order) {
        try{
            return new ResponseEntity(this.templateService.getTemplates(userId, templatename, startdate,enddate,token,order), HttpStatus.OK);
        }
        catch (JsonProcessingException ex){
            throw new InternalServerException("Error processing JSON object");
        }
    }

    @CrossOrigin
    @Override
    public ResponseEntity<Void> updateTemplate(Integer templateId, Integer userId, @Valid TemplateResponse template) {
        try{
            this.templateService.updateTemplate(userId, templateId, template);
            return new ResponseEntity(HttpStatus.OK);
        }
        catch (JsonProcessingException ex){
            throw new InternalServerException("Error processing JSON object");
        }
    }
    @CrossOrigin
    @Override
    public ResponseEntity<Void> createToken(Integer templateId, Integer userId) {
        try {
            this.templateService.createToken(templateId, userId);
            return new ResponseEntity(HttpStatus.CREATED);
        }catch (Exception e){
            throw new CannotPerformOperationException("Error creating token");
        }
    }
    @CrossOrigin
    @Override
    public ResponseEntity<Void> deleteToken(Integer templateId, Integer userId) {
        try {
            this.templateService.deleteToken(templateId, userId);
            return new ResponseEntity(HttpStatus.OK);
        }catch(Exception e){
            throw new CannotPerformOperationException("Error deleting token");
        }
    }
    @CrossOrigin
    @Override
    public ResponseEntity<List<TokenResponse>> getToken(Integer templateId, Integer userId) {
        try {
            return new ResponseEntity(this.templateService.getToken(templateId, userId),HttpStatus.OK);
        }catch (Exception e){
            throw new CannotPerformOperationException("Error getting exception");
        }
    }
}

