package com.rfranco.virtualkeypad.units;

import com.flextrade.jfixture.JFixture;
import com.rfranco.virtualkeypad.autogenerated.dtos.UserReponse;
import com.rfranco.virtualkeypad.exceptions.NotFoundException;
import com.rfranco.virtualkeypad.models.UserModel;
import com.rfranco.virtualkeypad.repositories.UserRepository;
import com.rfranco.virtualkeypad.services.UserService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;


@RunWith(SpringRunner.class)
@SpringBootTest
@ContextConfiguration(classes = {UserService.class})
public class UserServiceTestUnit {
    @MockBean
    private UserRepository userrepository;
    @Autowired
    private UserService userService;

    JFixture fixture = new JFixture();

    @Test(expected = NotFoundException.class)
    public void doUpdateUserInformationForUserNotCreated() {
        int userId = 100;
        Mockito.when(this.userrepository.findById((long)userId)).thenReturn(Optional.empty());
        this.userService.updateUser(userId, fixture.create(UserReponse.class));
    }

    @Test
    public void doUpdateUserInformationSuccesfully(){
        int userId = 110;
        UserModel model = UserModel.builder().userId(110)
                .userName("username")
                .lastname("test")
                .email("test@test.com").build();
        UserReponse response = fixture.create(UserReponse.class);
        Mockito.when(this.userrepository.findById((long)userId)).thenReturn(Optional.of(model));
        this.userService.updateUser(userId, response);

        Mockito.verify(this.userrepository, Mockito.times(1)).save(any(UserModel.class));

    }

    @Test(expected = NotFoundException.class)
    public void doDeleteUserNotCreated(){
        int userId = 200;
        Mockito.when(this.userrepository.findById((long)userId)).thenReturn(Optional.empty());
        this.userService.deleteUser(userId);
    }

    @Test
    public void doDeleteUserSuccesfully(){
        int userId = 110;
        UserModel model = UserModel.builder().userId(110)
                .userName("username")
                .lastname("test")
                .email("test@test.com").build();
        Mockito.when(this.userrepository.findById((long) userId)).thenReturn(Optional.of(model));
        this.userService.deleteUser(userId);

        Mockito.verify(this.userrepository, Mockito.times(1)).deleteById(any(long.class));
    }

    @Test(expected = NotFoundException.class)
    public void doGetUserForNotUserCreated(){
        int userId = 200;
        Mockito.when(this.userrepository.findById((long)userId)).thenReturn(Optional.empty());
        this.userService.getUser(userId);
    }

    @Test
    public void doGetUserSuccessfully(){
        int userId = 20;
        UserModel model = UserModel.builder().userId(110)
                .userName("username")
                .lastname("test")
                .email("test@test.com").build();
        Mockito.when(this.userrepository.findById((long) userId)).thenReturn(Optional.of(model));
        this.userService.getUser(userId);

        Mockito.verify(this.userrepository, Mockito.times(2)).findById(any(long.class));
    }

}
