{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar request = require('request-promise-native');\n\nvar urlParse = require('url').URL;\n\nvar isUrl = require('is-url');\n\nfunction CheckByRequest(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      request({\n        method: 'HEAD',\n        uri: url,\n        resolveWithFullResponse: true\n      }).then(function (respose) {\n        resolve(respose);\n      }).catch(function () {\n        request({\n          method: 'GET',\n          uri: url,\n          resolveWithFullResponse: true\n        }).then(function (respose) {\n          resolve(respose);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction isImageURL(_x) {\n  return _isImageURL.apply(this, arguments);\n}\n\nfunction _isImageURL() {\n  _isImageURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              try {\n                // When URL Not Exists\n                if (!url) {\n                  return resolve(false);\n                } // If url is not HTTP URL (Local Path)\n\n\n                if (!isUrl(url)) {\n                  return resolve(false);\n                } // Check for URL Pathname Exists\n\n\n                var parsedURL = new urlParse(url);\n                var pathname = parsedURL.pathname;\n                if (!pathname) return resolve(false); // Check URL Content by Head Reuqest\n\n                CheckByRequest(url).then(function (res) {\n                  if (!res) return resolve(false);\n                  if (!(res.statusCode >= 200 && res.statusCode < 300)) return resolve(false);\n                  var headers = res.headers;\n                  if (!headers) return resolve(false);\n                  var contentType = headers['content-type'];\n                  if (!contentType) return resolve(false);\n                  return resolve(contentType.search(/^image\\//) != -1);\n                }).catch(function () {\n                  return resolve(false);\n                });\n              } catch (e) {\n                return resolve(false);\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _isImageURL.apply(this, arguments);\n}\n\n;\nexports.default = isImageURL;","map":{"version":3,"sources":["/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/image-url-validator/index.js"],"names":["request","require","urlParse","URL","isUrl","CheckByRequest","url","Promise","resolve","reject","method","uri","resolveWithFullResponse","then","respose","catch","err","isImageURL","parsedURL","pathname","res","statusCode","headers","contentType","search","e","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst request = require('request-promise-native');\nconst urlParse = require('url').URL;\nconst isUrl = require('is-url');\n\nfunction CheckByRequest(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      request({\n        method: 'HEAD',\n        uri: url,\n        resolveWithFullResponse: true,\n      })\n      .then(function (respose) {\n        resolve(respose);\n      })\n      .catch(function () {\n        request({\n          method: 'GET',\n          uri: url,\n          resolveWithFullResponse: true,\n        })\n        .then(function (respose) {\n          resolve(respose);\n        })\n        .catch(function (err) {\n          reject(err);\n        });\n      })\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nasync function isImageURL (url) {\n  return new Promise(function (resolve) {\n    try {\n      // When URL Not Exists\n      if (!url) {\n        return resolve(false);\n      }\n\n      // If url is not HTTP URL (Local Path)\n      if (!isUrl(url)) {\n        return resolve(false);\n      }\n\n      // Check for URL Pathname Exists\n      var parsedURL = new urlParse(url);\n      let pathname = parsedURL.pathname;\n      if (!pathname) return resolve(false);\n\n      // Check URL Content by Head Reuqest\n      CheckByRequest(url)\n        .then(function (res) {\n          if (!res) return resolve(false);\n          if (!(res.statusCode >= 200 && res.statusCode < 300)) return resolve(false);\n    \n          const headers = res.headers;\n          if (!headers) return resolve(false);\n          const contentType = headers['content-type'];\n          if (!contentType) return resolve(false);\n          return resolve(contentType.search(/^image\\//) != -1);\n        })\n        .catch(function () {\n          return resolve(false);\n        })\n    } catch (e) {\n      return resolve(false);\n    }\n  });\n};\n\nexports.default = isImageURL;"]},"metadata":{},"sourceType":"script"}