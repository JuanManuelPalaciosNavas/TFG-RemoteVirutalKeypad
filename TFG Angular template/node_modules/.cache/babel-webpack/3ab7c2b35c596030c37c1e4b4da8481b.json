{"ast":null,"code":"import _inherits from \"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _toConsumableArray from \"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v11.0.5\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { ComponentFactoryResolver, NgZone, Injector, ChangeDetectorRef, ApplicationRef, SimpleChange, Version } from '@angular/core';\nimport { ReplaySubject, merge } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\n\nvar scheduler = {\n  /**\n   * Schedule a callback to be called after some delay.\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  schedule: function schedule(taskFn, delay) {\n    var id = setTimeout(taskFn, delay);\n    return function () {\n      return clearTimeout(id);\n    };\n  },\n\n  /**\n   * Schedule a callback to be called before the next render.\n   * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  scheduleBeforeRender: function scheduleBeforeRender(taskFn) {\n    // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n    //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n    if (typeof window === 'undefined') {\n      // For SSR just schedule immediately.\n      return scheduler.schedule(taskFn, 0);\n    }\n\n    if (typeof window.requestAnimationFrame === 'undefined') {\n      var frameMs = 16;\n      return scheduler.schedule(taskFn, frameMs);\n    }\n\n    var id = window.requestAnimationFrame(taskFn);\n    return function () {\n      return window.cancelAnimationFrame(id);\n    };\n  }\n};\n/**\n * Convert a camelCased string to kebab-cased.\n */\n\nfunction camelToDashCase(input) {\n  return input.replace(/[A-Z]/g, function (char) {\n    return \"-\".concat(char.toLowerCase());\n  });\n}\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n */\n\n\nfunction createCustomEvent(doc, name, detail) {\n  var bubbles = false;\n  var cancelable = false; // On IE11, `CustomEvent` is not a constructor.\n\n  if (typeof CustomEvent !== 'function') {\n    var event = doc.createEvent('CustomEvent');\n    event.initCustomEvent(name, bubbles, cancelable, detail);\n    return event;\n  }\n\n  return new CustomEvent(name, {\n    bubbles: bubbles,\n    cancelable: cancelable,\n    detail: detail\n  });\n}\n/**\n * Check whether the input is an `Element`.\n */\n\n\nfunction isElement(node) {\n  return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Check whether the input is a function.\n */\n\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\n * Convert a kebab-cased string to camelCased.\n */\n\n\nfunction kebabToCamelCase(input) {\n  return input.replace(/-([a-z\\d])/g, function (_, char) {\n    return char.toUpperCase();\n  });\n}\n\nvar _matches;\n/**\n * Check whether an `Element` matches a CSS selector.\n * NOTE: this is duplicated from @angular/upgrade, and can\n * be consolidated in the future\n */\n\n\nfunction matchesSelector(el, selector) {\n  if (!_matches) {\n    var elProto = Element.prototype;\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector || elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\n\n\nfunction strictEquals(value1, value2) {\n  return value1 === value2 || value1 !== value1 && value2 !== value2;\n}\n/** Gets a map of default set of attributes to observe and the properties they affect. */\n\n\nfunction getDefaultAttributeToPropertyInputs(inputs) {\n  var attributeToPropertyInputs = {};\n  inputs.forEach(function (_ref) {\n    var propName = _ref.propName,\n        templateName = _ref.templateName;\n    attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n  });\n  return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\n\n\nfunction getComponentInputs(component, injector) {\n  var componentFactoryResolver = injector.get(ComponentFactoryResolver);\n  var componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n  return componentFactory.inputs;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction extractProjectableNodes(host, ngContentSelectors) {\n  var nodes = host.childNodes;\n  var projectableNodes = ngContentSelectors.map(function () {\n    return [];\n  });\n  var wildcardIndex = -1;\n  ngContentSelectors.some(function (selector, i) {\n    if (selector === '*') {\n      wildcardIndex = i;\n      return true;\n    }\n\n    return false;\n  });\n\n  for (var i = 0, ii = nodes.length; i < ii; ++i) {\n    var node = nodes[i];\n    var ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n\n    if (ngContentIndex !== -1) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n  var matchingIndex = defaultIndex;\n\n  if (isElement(node)) {\n    selectors.some(function (selector, i) {\n      if (selector !== '*' && matchesSelector(node, selector)) {\n        matchingIndex = i;\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  return matchingIndex;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\n\n\nvar DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * @publicApi\n */\n\nvar ComponentNgElementStrategyFactory = /*#__PURE__*/function () {\n  function ComponentNgElementStrategyFactory(component, injector) {\n    _classCallCheck(this, ComponentNgElementStrategyFactory);\n\n    this.componentFactory = injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n  }\n\n  _createClass(ComponentNgElementStrategyFactory, [{\n    key: \"create\",\n    value: function create(injector) {\n      return new ComponentNgElementStrategy(this.componentFactory, injector);\n    }\n  }]);\n\n  return ComponentNgElementStrategyFactory;\n}();\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * @publicApi\n */\n\n\nvar ComponentNgElementStrategy = /*#__PURE__*/function () {\n  function ComponentNgElementStrategy(componentFactory, injector) {\n    _classCallCheck(this, ComponentNgElementStrategy);\n\n    this.componentFactory = componentFactory;\n    this.injector = injector; // Subject of `NgElementStrategyEvent` observables corresponding to the component's outputs.\n\n    this.eventEmitters = new ReplaySubject(1);\n    /** Merged stream of the component's output events. */\n\n    this.events = this.eventEmitters.pipe(switchMap(function (emitters) {\n      return merge.apply(void 0, _toConsumableArray(emitters));\n    }));\n    /** Reference to the component that was created on connect. */\n\n    this.componentRef = null;\n    /** Reference to the component view's `ChangeDetectorRef`. */\n\n    this.viewChangeDetectorRef = null;\n    /**\n     * Changes that have been made to component inputs since the last change detection run.\n     * (NOTE: These are only recorded if the component implements the `OnChanges` interface.)\n     */\n\n    this.inputChanges = null;\n    /** Whether changes have been made to component inputs since the last change detection run. */\n\n    this.hasInputChanges = false;\n    /** Whether the created component implements the `OnChanges` interface. */\n\n    this.implementsOnChanges = false;\n    /** Whether a change detection has been scheduled to run on the component. */\n\n    this.scheduledChangeDetectionFn = null;\n    /** Callback function that when called will cancel a scheduled destruction on the component. */\n\n    this.scheduledDestroyFn = null;\n    /** Initial input values that were set before the component was created. */\n\n    this.initialInputValues = new Map();\n    /**\n     * Set of component inputs that have not yet changed, i.e. for which `recordInputChange()` has not\n     * fired.\n     * (This helps detect the first change of an input, even if it is explicitly set to `undefined`.)\n     */\n\n    this.unchangedInputs = new Set(this.componentFactory.inputs.map(function (_ref2) {\n      var propName = _ref2.propName;\n      return propName;\n    }));\n    /** Service for setting zone context. */\n\n    this.ngZone = this.injector.get(NgZone);\n    /** The zone the element was created in or `null` if Zone.js is not loaded. */\n\n    this.elementZone = typeof Zone === 'undefined' ? null : this.ngZone.run(function () {\n      return Zone.current;\n    });\n  }\n  /**\n   * Initializes a new component if one has not yet been created and cancels any scheduled\n   * destruction.\n   */\n\n\n  _createClass(ComponentNgElementStrategy, [{\n    key: \"connect\",\n    value: function connect(element) {\n      var _this = this;\n\n      this.runInZone(function () {\n        // If the element is marked to be destroyed, cancel the task since the component was\n        // reconnected\n        if (_this.scheduledDestroyFn !== null) {\n          _this.scheduledDestroyFn();\n\n          _this.scheduledDestroyFn = null;\n          return;\n        }\n\n        if (_this.componentRef === null) {\n          _this.initializeComponent(element);\n        }\n      });\n    }\n    /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this2 = this;\n\n      this.runInZone(function () {\n        // Return if there is no componentRef or the component is already scheduled for destruction\n        if (_this2.componentRef === null || _this2.scheduledDestroyFn !== null) {\n          return;\n        } // Schedule the component to be destroyed after a small timeout in case it is being\n        // moved elsewhere in the DOM\n\n\n        _this2.scheduledDestroyFn = scheduler.schedule(function () {\n          if (_this2.componentRef !== null) {\n            _this2.componentRef.destroy();\n\n            _this2.componentRef = null;\n            _this2.viewChangeDetectorRef = null;\n          }\n        }, DESTROY_DELAY);\n      });\n    }\n    /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     */\n\n  }, {\n    key: \"getInputValue\",\n    value: function getInputValue(property) {\n      var _this3 = this;\n\n      return this.runInZone(function () {\n        if (_this3.componentRef === null) {\n          return _this3.initialInputValues.get(property);\n        }\n\n        return _this3.componentRef.instance[property];\n      });\n    }\n    /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     */\n\n  }, {\n    key: \"setInputValue\",\n    value: function setInputValue(property, value) {\n      var _this4 = this;\n\n      this.runInZone(function () {\n        if (_this4.componentRef === null) {\n          _this4.initialInputValues.set(property, value);\n\n          return;\n        } // Ignore the value if it is strictly equal to the current value, except if it is `undefined`\n        // and this is the first change to the value (because an explicit `undefined` _is_ strictly\n        // equal to not having a value set at all, but we still need to record this as a change).\n\n\n        if (strictEquals(value, _this4.getInputValue(property)) && !(value === undefined && _this4.unchangedInputs.has(property))) {\n          return;\n        } // Record the changed value and update internal state to reflect the fact that this input has\n        // changed.\n\n\n        _this4.recordInputChange(property, value);\n\n        _this4.unchangedInputs.delete(property);\n\n        _this4.hasInputChanges = true; // Update the component instance and schedule change detection.\n\n        _this4.componentRef.instance[property] = value;\n\n        _this4.scheduleDetectChanges();\n      });\n    }\n    /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     */\n\n  }, {\n    key: \"initializeComponent\",\n    value: function initializeComponent(element) {\n      var childInjector = Injector.create({\n        providers: [],\n        parent: this.injector\n      });\n      var projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n      this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n      this.viewChangeDetectorRef = this.componentRef.injector.get(ChangeDetectorRef);\n      this.implementsOnChanges = isFunction(this.componentRef.instance.ngOnChanges);\n      this.initializeInputs();\n      this.initializeOutputs(this.componentRef);\n      this.detectChanges();\n      var applicationRef = this.injector.get(ApplicationRef);\n      applicationRef.attachView(this.componentRef.hostView);\n    }\n    /** Set any stored initial inputs on the component's properties. */\n\n  }, {\n    key: \"initializeInputs\",\n    value: function initializeInputs() {\n      var _this5 = this;\n\n      this.componentFactory.inputs.forEach(function (_ref3) {\n        var propName = _ref3.propName;\n\n        if (_this5.initialInputValues.has(propName)) {\n          // Call `setInputValue()` now that the component has been instantiated to update its\n          // properties and fire `ngOnChanges()`.\n          _this5.setInputValue(propName, _this5.initialInputValues.get(propName));\n        }\n      });\n      this.initialInputValues.clear();\n    }\n    /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n\n  }, {\n    key: \"initializeOutputs\",\n    value: function initializeOutputs(componentRef) {\n      var eventEmitters = this.componentFactory.outputs.map(function (_ref4) {\n        var propName = _ref4.propName,\n            templateName = _ref4.templateName;\n        var emitter = componentRef.instance[propName];\n        return emitter.pipe(map(function (value) {\n          return {\n            name: templateName,\n            value: value\n          };\n        }));\n      });\n      this.eventEmitters.next(eventEmitters);\n    }\n    /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n\n  }, {\n    key: \"callNgOnChanges\",\n    value: function callNgOnChanges(componentRef) {\n      if (!this.implementsOnChanges || this.inputChanges === null) {\n        return;\n      } // Cache the changes and set inputChanges to null to capture any changes that might occur\n      // during ngOnChanges.\n\n\n      var inputChanges = this.inputChanges;\n      this.inputChanges = null;\n      componentRef.instance.ngOnChanges(inputChanges);\n    }\n    /**\n     * Marks the component view for check, if necessary.\n     * (NOTE: This is required when the `ChangeDetectionStrategy` is set to `OnPush`.)\n     */\n\n  }, {\n    key: \"markViewForCheck\",\n    value: function markViewForCheck(viewChangeDetectorRef) {\n      if (this.hasInputChanges) {\n        this.hasInputChanges = false;\n        viewChangeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     */\n\n  }, {\n    key: \"scheduleDetectChanges\",\n    value: function scheduleDetectChanges() {\n      var _this6 = this;\n\n      if (this.scheduledChangeDetectionFn) {\n        return;\n      }\n\n      this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(function () {\n        _this6.scheduledChangeDetectionFn = null;\n\n        _this6.detectChanges();\n      });\n    }\n    /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     */\n\n  }, {\n    key: \"recordInputChange\",\n    value: function recordInputChange(property, currentValue) {\n      // Do not record the change if the component does not implement `OnChanges`.\n      if (!this.implementsOnChanges) {\n        return;\n      }\n\n      if (this.inputChanges === null) {\n        this.inputChanges = {};\n      } // If there already is a change, modify the current value to match but leave the values for\n      // `previousValue` and `isFirstChange`.\n\n\n      var pendingChange = this.inputChanges[property];\n\n      if (pendingChange) {\n        pendingChange.currentValue = currentValue;\n        return;\n      }\n\n      var isFirstChange = this.unchangedInputs.has(property);\n      var previousValue = isFirstChange ? undefined : this.getInputValue(property);\n      this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n    }\n    /** Runs change detection on the component. */\n\n  }, {\n    key: \"detectChanges\",\n    value: function detectChanges() {\n      if (this.componentRef === null) {\n        return;\n      }\n\n      this.callNgOnChanges(this.componentRef);\n      this.markViewForCheck(this.viewChangeDetectorRef);\n      this.componentRef.changeDetectorRef.detectChanges();\n    }\n    /** Runs in the angular zone, if present. */\n\n  }, {\n    key: \"runInZone\",\n    value: function runInZone(fn) {\n      return this.elementZone && Zone.current !== this.elementZone ? this.ngZone.run(fn) : fn();\n    }\n  }]);\n\n  return ComponentNgElementStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\n\n\nvar NgElement = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(NgElement, _HTMLElement);\n\n  var _super = _createSuper(NgElement);\n\n  function NgElement() {\n    var _this7;\n\n    _classCallCheck(this, NgElement);\n\n    _this7 = _super.apply(this, arguments);\n    /**\n     * A subscription to change, connect, and disconnect events in the custom element.\n     */\n\n    _this7.ngElementEventsSubscription = null;\n    return _this7;\n  }\n\n  return NgElement;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\n\n\nfunction createCustomElement(component, config) {\n  var inputs = getComponentInputs(component, config.injector);\n  var strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n  var attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n\n  var NgElementImpl = /*#__PURE__*/function (_NgElement) {\n    _inherits(NgElementImpl, _NgElement);\n\n    var _super2 = _createSuper(NgElementImpl);\n\n    function NgElementImpl(injector) {\n      var _this8;\n\n      _classCallCheck(this, NgElementImpl);\n\n      _this8 = _super2.call(this);\n      _this8.injector = injector;\n      return _this8;\n    }\n\n    _createClass(NgElementImpl, [{\n      key: \"ngElementStrategy\",\n      get: function get() {\n        var _this9 = this;\n\n        // NOTE:\n        // Some polyfills (e.g. `document-register-element`) do not call the constructor, therefore\n        // it is not safe to set `ngElementStrategy` in the constructor and assume it will be\n        // available inside the methods.\n        //\n        // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n        // now this is tested using a Google internal test suite.\n        if (!this._ngElementStrategy) {\n          var strategy = this._ngElementStrategy = strategyFactory.create(this.injector || config.injector); // Re-apply pre-existing input values (set as properties on the element) through the\n          // strategy.\n\n          inputs.forEach(function (_ref5) {\n            var propName = _ref5.propName;\n\n            if (!_this9.hasOwnProperty(propName)) {\n              // No pre-existing value for `propName`.\n              return;\n            } // Delete the property from the instance and re-apply it through the strategy.\n\n\n            var value = _this9[propName];\n            delete _this9[propName];\n            strategy.setInputValue(propName, value);\n          });\n        }\n\n        return this._ngElementStrategy;\n      }\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(attrName, oldValue, newValue, namespace) {\n        var propName = attributeToPropertyInputs[attrName];\n        this.ngElementStrategy.setInputValue(propName, newValue);\n      }\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        // For historical reasons, some strategies may not have initialized the `events` property\n        // until after `connect()` is run. Subscribe to `events` if it is available before running\n        // `connect()` (in order to capture events emitted suring inittialization), otherwise\n        // subscribe afterwards.\n        //\n        // TODO: Consider deprecating/removing the post-connect subscription in a future major version\n        //       (e.g. v11).\n        var subscribedToEvents = false;\n\n        if (this.ngElementStrategy.events) {\n          // `events` are already available: Subscribe to it asap.\n          this.subscribeToEvents();\n          subscribedToEvents = true;\n        }\n\n        this.ngElementStrategy.connect(this);\n\n        if (!subscribedToEvents) {\n          // `events` were not initialized before running `connect()`: Subscribe to them now.\n          // The events emitted during the component initialization have been missed, but at least\n          // future events will be captured.\n          this.subscribeToEvents();\n        }\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.\n        if (this._ngElementStrategy) {\n          this._ngElementStrategy.disconnect();\n        }\n\n        if (this.ngElementEventsSubscription) {\n          this.ngElementEventsSubscription.unsubscribe();\n          this.ngElementEventsSubscription = null;\n        }\n      }\n    }, {\n      key: \"subscribeToEvents\",\n      value: function subscribeToEvents() {\n        var _this10 = this;\n\n        // Listen for events from the strategy and dispatch them as custom events.\n        this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(function (e) {\n          var customEvent = createCustomEvent(_this10.ownerDocument, e.name, e.value);\n\n          _this10.dispatchEvent(customEvent);\n        });\n      }\n    }]);\n\n    return NgElementImpl;\n  }(NgElement); // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n  // field externs. So using quoted access to explicitly prevent renaming.\n\n\n  NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs); // Add getters and setters to the prototype for each property input.\n\n  inputs.forEach(function (_ref6) {\n    var propName = _ref6.propName;\n    Object.defineProperty(NgElementImpl.prototype, propName, {\n      get: function get() {\n        return this.ngElementStrategy.getInputValue(propName);\n      },\n      set: function set(newValue) {\n        this.ngElementStrategy.setInputValue(propName, newValue);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  });\n  return NgElementImpl;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\n\n\nvar VERSION = new Version('11.0.5');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgElement, VERSION, createCustomElement };","map":{"version":3,"sources":["../../../../../../packages/elements/src/utils.ts","../../../../../../packages/elements/src/extract-projectable-nodes.ts","../../../../../../packages/elements/src/component-factory-strategy.ts","../../../../../../packages/elements/src/create-custom-element.ts","../../../../../../packages/elements/src/version.ts","../../../../../../packages/elements/public_api.ts","../../../../../../packages/elements/index.ts","../../../../../../packages/elements/elements.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\nexport const scheduler = {\n  /**\n   * Schedule a callback to be called after some delay.\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  schedule(taskFn: () => void, delay: number): () => void {\n    const id = setTimeout(taskFn, delay);\n    return () => clearTimeout(id);\n  },\n\n  /**\n   * Schedule a callback to be called before the next render.\n   * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  scheduleBeforeRender(taskFn: () => void): () => void {\n    // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n    //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n    if (typeof window === 'undefined') {\n      // For SSR just schedule immediately.\n      return scheduler.schedule(taskFn, 0);\n    }\n\n    if (typeof window.requestAnimationFrame === 'undefined') {\n      const frameMs = 16;\n      return scheduler.schedule(taskFn, frameMs);\n    }\n\n    const id = window.requestAnimationFrame(taskFn);\n    return () => window.cancelAnimationFrame(id);\n  },\n};\n\n/**\n * Convert a camelCased string to kebab-cased.\n */\nexport function camelToDashCase(input: string): string {\n  return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n */\nexport function createCustomEvent(doc: Document, name: string, detail: any): CustomEvent {\n  const bubbles = false;\n  const cancelable = false;\n\n  // On IE11, `CustomEvent` is not a constructor.\n  if (typeof CustomEvent !== 'function') {\n    const event = doc.createEvent('CustomEvent');\n    event.initCustomEvent(name, bubbles, cancelable, detail);\n    return event;\n  }\n\n  return new CustomEvent(name, {bubbles, cancelable, detail});\n}\n\n/**\n * Check whether the input is an `Element`.\n */\nexport function isElement(node: Node|null): node is Element {\n  return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n\n/**\n * Check whether the input is a function.\n */\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\n/**\n * Convert a kebab-cased string to camelCased.\n */\nexport function kebabToCamelCase(input: string): string {\n  return input.replace(/-([a-z\\d])/g, (_, char) => char.toUpperCase());\n}\n\nlet _matches: (this: any, selector: string) => boolean;\n\n/**\n * Check whether an `Element` matches a CSS selector.\n * NOTE: this is duplicated from @angular/upgrade, and can\n * be consolidated in the future\n */\nexport function matchesSelector(el: any, selector: string): boolean {\n  if (!_matches) {\n    const elProto = <any>Element.prototype;\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nexport function strictEquals(value1: any, value2: any): boolean {\n  return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n\n/** Gets a map of default set of attributes to observe and the properties they affect. */\nexport function getDefaultAttributeToPropertyInputs(\n    inputs: {propName: string, templateName: string}[]) {\n  const attributeToPropertyInputs: {[key: string]: string} = {};\n  inputs.forEach(({propName, templateName}) => {\n    attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n  });\n\n  return attributeToPropertyInputs;\n}\n\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\nexport function getComponentInputs(\n    component: Type<any>, injector: Injector): {propName: string, templateName: string}[] {\n  const componentFactoryResolver: ComponentFactoryResolver = injector.get(ComponentFactoryResolver);\n  const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n  return componentFactory.inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// NOTE: This is a (slightly improved) version of what is used in ngUpgrade's\n//       `DowngradeComponentAdapter`.\n// TODO(gkalpak): Investigate if it makes sense to share the code.\n\nimport {isElement, matchesSelector} from './utils';\n\nexport function extractProjectableNodes(host: HTMLElement, ngContentSelectors: string[]): Node[][] {\n  const nodes = host.childNodes;\n  const projectableNodes: Node[][] = ngContentSelectors.map(() => []);\n  let wildcardIndex = -1;\n\n  ngContentSelectors.some((selector, i) => {\n    if (selector === '*') {\n      wildcardIndex = i;\n      return true;\n    }\n    return false;\n  });\n\n  for (let i = 0, ii = nodes.length; i < ii; ++i) {\n    const node = nodes[i];\n    const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n\n    if (ngContentIndex !== -1) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingIndex(node: Node, selectors: string[], defaultIndex: number): number {\n  let matchingIndex = defaultIndex;\n\n  if (isElement(node)) {\n    selectors.some((selector, i) => {\n      if ((selector !== '*') && matchesSelector(node, selector)) {\n        matchingIndex = i;\n        return true;\n      }\n      return false;\n    });\n  }\n\n  return matchingIndex;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ChangeDetectorRef, ComponentFactory, ComponentFactoryResolver, ComponentRef, EventEmitter, Injector, NgZone, OnChanges, SimpleChange, SimpleChanges, Type} from '@angular/core';\nimport {merge, Observable, ReplaySubject} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\nimport {NgElementStrategy, NgElementStrategyEvent, NgElementStrategyFactory} from './element-strategy';\nimport {extractProjectableNodes} from './extract-projectable-nodes';\nimport {isFunction, scheduler, strictEquals} from './utils';\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\nconst DESTROY_DELAY = 10;\n\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * @publicApi\n */\nexport class ComponentNgElementStrategyFactory implements NgElementStrategyFactory {\n  componentFactory: ComponentFactory<any>;\n\n  constructor(component: Type<any>, injector: Injector) {\n    this.componentFactory =\n        injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n  }\n\n  create(injector: Injector) {\n    return new ComponentNgElementStrategy(this.componentFactory, injector);\n  }\n}\n\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * @publicApi\n */\nexport class ComponentNgElementStrategy implements NgElementStrategy {\n  // Subject of `NgElementStrategyEvent` observables corresponding to the component's outputs.\n  private eventEmitters = new ReplaySubject<Observable<NgElementStrategyEvent>[]>(1);\n\n  /** Merged stream of the component's output events. */\n  readonly events = this.eventEmitters.pipe(switchMap(emitters => merge(...emitters)));\n\n  /** Reference to the component that was created on connect. */\n  private componentRef: ComponentRef<any>|null = null;\n\n  /** Reference to the component view's `ChangeDetectorRef`. */\n  private viewChangeDetectorRef: ChangeDetectorRef|null = null;\n\n  /**\n   * Changes that have been made to component inputs since the last change detection run.\n   * (NOTE: These are only recorded if the component implements the `OnChanges` interface.)\n   */\n  private inputChanges: SimpleChanges|null = null;\n\n  /** Whether changes have been made to component inputs since the last change detection run. */\n  private hasInputChanges = false;\n\n  /** Whether the created component implements the `OnChanges` interface. */\n  private implementsOnChanges = false;\n\n  /** Whether a change detection has been scheduled to run on the component. */\n  private scheduledChangeDetectionFn: (() => void)|null = null;\n\n  /** Callback function that when called will cancel a scheduled destruction on the component. */\n  private scheduledDestroyFn: (() => void)|null = null;\n\n  /** Initial input values that were set before the component was created. */\n  private readonly initialInputValues = new Map<string, any>();\n\n  /**\n   * Set of component inputs that have not yet changed, i.e. for which `recordInputChange()` has not\n   * fired.\n   * (This helps detect the first change of an input, even if it is explicitly set to `undefined`.)\n   */\n  private readonly unchangedInputs =\n      new Set<string>(this.componentFactory.inputs.map(({propName}) => propName));\n\n  /** Service for setting zone context. */\n  private readonly ngZone = this.injector.get<NgZone>(NgZone);\n\n  /** The zone the element was created in or `null` if Zone.js is not loaded. */\n  private readonly elementZone =\n      (typeof Zone === 'undefined') ? null : this.ngZone.run(() => Zone.current);\n\n  constructor(private componentFactory: ComponentFactory<any>, private injector: Injector) {}\n\n  /**\n   * Initializes a new component if one has not yet been created and cancels any scheduled\n   * destruction.\n   */\n  connect(element: HTMLElement) {\n    this.runInZone(() => {\n      // If the element is marked to be destroyed, cancel the task since the component was\n      // reconnected\n      if (this.scheduledDestroyFn !== null) {\n        this.scheduledDestroyFn();\n        this.scheduledDestroyFn = null;\n        return;\n      }\n\n      if (this.componentRef === null) {\n        this.initializeComponent(element);\n      }\n    });\n  }\n\n  /**\n   * Schedules the component to be destroyed after some small delay in case the element is just\n   * being moved across the DOM.\n   */\n  disconnect() {\n    this.runInZone(() => {\n      // Return if there is no componentRef or the component is already scheduled for destruction\n      if (this.componentRef === null || this.scheduledDestroyFn !== null) {\n        return;\n      }\n\n      // Schedule the component to be destroyed after a small timeout in case it is being\n      // moved elsewhere in the DOM\n      this.scheduledDestroyFn = scheduler.schedule(() => {\n        if (this.componentRef !== null) {\n          this.componentRef.destroy();\n          this.componentRef = null;\n          this.viewChangeDetectorRef = null;\n        }\n      }, DESTROY_DELAY);\n    });\n  }\n\n  /**\n   * Returns the component property value. If the component has not yet been created, the value is\n   * retrieved from the cached initialization values.\n   */\n  getInputValue(property: string): any {\n    return this.runInZone(() => {\n      if (this.componentRef === null) {\n        return this.initialInputValues.get(property);\n      }\n\n      return this.componentRef.instance[property];\n    });\n  }\n\n  /**\n   * Sets the input value for the property. If the component has not yet been created, the value is\n   * cached and set when the component is created.\n   */\n  setInputValue(property: string, value: any): void {\n    this.runInZone(() => {\n      if (this.componentRef === null) {\n        this.initialInputValues.set(property, value);\n        return;\n      }\n\n      // Ignore the value if it is strictly equal to the current value, except if it is `undefined`\n      // and this is the first change to the value (because an explicit `undefined` _is_ strictly\n      // equal to not having a value set at all, but we still need to record this as a change).\n      if (strictEquals(value, this.getInputValue(property)) &&\n          !((value === undefined) && this.unchangedInputs.has(property))) {\n        return;\n      }\n\n      // Record the changed value and update internal state to reflect the fact that this input has\n      // changed.\n      this.recordInputChange(property, value);\n      this.unchangedInputs.delete(property);\n      this.hasInputChanges = true;\n\n      // Update the component instance and schedule change detection.\n      this.componentRef.instance[property] = value;\n      this.scheduleDetectChanges();\n    });\n  }\n\n  /**\n   * Creates a new component through the component factory with the provided element host and\n   * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n   */\n  protected initializeComponent(element: HTMLElement) {\n    const childInjector = Injector.create({providers: [], parent: this.injector});\n    const projectableNodes =\n        extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n    this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n    this.viewChangeDetectorRef = this.componentRef.injector.get(ChangeDetectorRef);\n\n    this.implementsOnChanges = isFunction((this.componentRef.instance as OnChanges).ngOnChanges);\n\n    this.initializeInputs();\n    this.initializeOutputs(this.componentRef);\n\n    this.detectChanges();\n\n    const applicationRef = this.injector.get<ApplicationRef>(ApplicationRef);\n    applicationRef.attachView(this.componentRef.hostView);\n  }\n\n  /** Set any stored initial inputs on the component's properties. */\n  protected initializeInputs(): void {\n    this.componentFactory.inputs.forEach(({propName}) => {\n      if (this.initialInputValues.has(propName)) {\n        // Call `setInputValue()` now that the component has been instantiated to update its\n        // properties and fire `ngOnChanges()`.\n        this.setInputValue(propName, this.initialInputValues.get(propName));\n      }\n    });\n\n    this.initialInputValues.clear();\n  }\n\n  /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n  protected initializeOutputs(componentRef: ComponentRef<any>): void {\n    const eventEmitters: Observable<NgElementStrategyEvent>[] =\n        this.componentFactory.outputs.map(({propName, templateName}) => {\n          const emitter: EventEmitter<any> = componentRef.instance[propName];\n          return emitter.pipe(map(value => ({name: templateName, value})));\n        });\n\n    this.eventEmitters.next(eventEmitters);\n  }\n\n  /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n  protected callNgOnChanges(componentRef: ComponentRef<any>): void {\n    if (!this.implementsOnChanges || this.inputChanges === null) {\n      return;\n    }\n\n    // Cache the changes and set inputChanges to null to capture any changes that might occur\n    // during ngOnChanges.\n    const inputChanges = this.inputChanges;\n    this.inputChanges = null;\n    (componentRef.instance as OnChanges).ngOnChanges(inputChanges);\n  }\n\n  /**\n   * Marks the component view for check, if necessary.\n   * (NOTE: This is required when the `ChangeDetectionStrategy` is set to `OnPush`.)\n   */\n  protected markViewForCheck(viewChangeDetectorRef: ChangeDetectorRef): void {\n    if (this.hasInputChanges) {\n      this.hasInputChanges = false;\n      viewChangeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Schedules change detection to run on the component.\n   * Ignores subsequent calls if already scheduled.\n   */\n  protected scheduleDetectChanges(): void {\n    if (this.scheduledChangeDetectionFn) {\n      return;\n    }\n\n    this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(() => {\n      this.scheduledChangeDetectionFn = null;\n      this.detectChanges();\n    });\n  }\n\n  /**\n   * Records input changes so that the component receives SimpleChanges in its onChanges function.\n   */\n  protected recordInputChange(property: string, currentValue: any): void {\n    // Do not record the change if the component does not implement `OnChanges`.\n    if (!this.implementsOnChanges) {\n      return;\n    }\n\n    if (this.inputChanges === null) {\n      this.inputChanges = {};\n    }\n\n    // If there already is a change, modify the current value to match but leave the values for\n    // `previousValue` and `isFirstChange`.\n    const pendingChange = this.inputChanges[property];\n    if (pendingChange) {\n      pendingChange.currentValue = currentValue;\n      return;\n    }\n\n    const isFirstChange = this.unchangedInputs.has(property);\n    const previousValue = isFirstChange ? undefined : this.getInputValue(property);\n    this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n  }\n\n  /** Runs change detection on the component. */\n  protected detectChanges(): void {\n    if (this.componentRef === null) {\n      return;\n    }\n\n    this.callNgOnChanges(this.componentRef);\n    this.markViewForCheck(this.viewChangeDetectorRef!);\n    this.componentRef.changeDetectorRef.detectChanges();\n  }\n\n  /** Runs in the angular zone, if present. */\n  private runInZone(fn: () => unknown) {\n    return (this.elementZone && Zone.current !== this.elementZone) ? this.ngZone.run(fn) : fn();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, Type} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentNgElementStrategyFactory} from './component-factory-strategy';\nimport {NgElementStrategy, NgElementStrategyFactory} from './element-strategy';\nimport {createCustomEvent, getComponentInputs, getDefaultAttributeToPropertyInputs} from './utils';\n\n/**\n * Prototype for a class constructor based on an Angular component\n * that can be used for custom element registration. Implemented and returned\n * by the {@link createCustomElement createCustomElement() function}.\n *\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\n *\n * @publicApi\n */\nexport interface NgElementConstructor<P> {\n  /**\n   * An array of observed attribute names for the custom element,\n   * derived by transforming input property names from the source component.\n   */\n  readonly observedAttributes: string[];\n\n  /**\n   * Initializes a constructor instance.\n   * @param injector If provided, overrides the configured injector.\n   */\n  new(injector?: Injector): NgElement&WithProperties<P>;\n}\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\nexport abstract class NgElement extends HTMLElement {\n  /**\n   * The strategy that controls how a component is transformed in a custom element.\n   */\n  protected abstract ngElementStrategy: NgElementStrategy;\n  /**\n   * A subscription to change, connect, and disconnect events in the custom element.\n   */\n  protected ngElementEventsSubscription: Subscription|null = null;\n\n  /**\n   * Prototype for a handler that responds to a change in an observed attribute.\n   * @param attrName The name of the attribute that has changed.\n   * @param oldValue The previous value of the attribute.\n   * @param newValue The new value of the attribute.\n   * @param namespace The namespace in which the attribute is defined.\n   * @returns Nothing.\n   */\n  abstract attributeChangedCallback(\n      attrName: string, oldValue: string|null, newValue: string, namespace?: string): void;\n  /**\n   * Prototype for a handler that responds to the insertion of the custom element in the DOM.\n   * @returns Nothing.\n   */\n  abstract connectedCallback(): void;\n  /**\n   * Prototype for a handler that responds to the deletion of the custom element from the DOM.\n   * @returns Nothing.\n   */\n  abstract disconnectedCallback(): void;\n}\n\n/**\n * Additional type information that can be added to the NgElement class,\n * for properties that are added based\n * on the inputs and methods of the underlying component.\n *\n * @publicApi\n */\nexport type WithProperties<P> = {\n  [property in keyof P]: P[property]\n};\n\n/**\n * A configuration that initializes an NgElementConstructor with the\n * dependencies and strategy it needs to transform a component into\n * a custom element class.\n *\n * @publicApi\n */\nexport interface NgElementConfig {\n  /**\n   * The injector to use for retrieving the component's factory.\n   */\n  injector: Injector;\n  /**\n   * An optional custom strategy factory to use instead of the default.\n   * The strategy controls how the transformation is performed.\n   */\n  strategyFactory?: NgElementStrategyFactory;\n}\n\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\nexport function createCustomElement<P>(\n    component: Type<any>, config: NgElementConfig): NgElementConstructor<P> {\n  const inputs = getComponentInputs(component, config.injector);\n\n  const strategyFactory =\n      config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n\n  const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n\n  class NgElementImpl extends NgElement {\n    // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n    // field externs. So using quoted access to explicitly prevent renaming.\n    static readonly['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n\n    protected get ngElementStrategy(): NgElementStrategy {\n      // NOTE:\n      // Some polyfills (e.g. `document-register-element`) do not call the constructor, therefore\n      // it is not safe to set `ngElementStrategy` in the constructor and assume it will be\n      // available inside the methods.\n      //\n      // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n      // now this is tested using a Google internal test suite.\n      if (!this._ngElementStrategy) {\n        const strategy = this._ngElementStrategy =\n            strategyFactory.create(this.injector || config.injector);\n\n        // Re-apply pre-existing input values (set as properties on the element) through the\n        // strategy.\n        inputs.forEach(({propName}) => {\n          if (!this.hasOwnProperty(propName)) {\n            // No pre-existing value for `propName`.\n            return;\n          }\n\n          // Delete the property from the instance and re-apply it through the strategy.\n          const value = (this as any)[propName];\n          delete (this as any)[propName];\n          strategy.setInputValue(propName, value);\n        });\n      }\n\n      return this._ngElementStrategy!;\n    }\n\n    private _ngElementStrategy?: NgElementStrategy;\n\n    constructor(private readonly injector?: Injector) {\n      super();\n    }\n\n    attributeChangedCallback(\n        attrName: string, oldValue: string|null, newValue: string, namespace?: string): void {\n      const propName = attributeToPropertyInputs[attrName]!;\n      this.ngElementStrategy.setInputValue(propName, newValue);\n    }\n\n    connectedCallback(): void {\n      // For historical reasons, some strategies may not have initialized the `events` property\n      // until after `connect()` is run. Subscribe to `events` if it is available before running\n      // `connect()` (in order to capture events emitted suring inittialization), otherwise\n      // subscribe afterwards.\n      //\n      // TODO: Consider deprecating/removing the post-connect subscription in a future major version\n      //       (e.g. v11).\n\n      let subscribedToEvents = false;\n\n      if (this.ngElementStrategy.events) {\n        // `events` are already available: Subscribe to it asap.\n        this.subscribeToEvents();\n        subscribedToEvents = true;\n      }\n\n      this.ngElementStrategy.connect(this);\n\n      if (!subscribedToEvents) {\n        // `events` were not initialized before running `connect()`: Subscribe to them now.\n        // The events emitted during the component initialization have been missed, but at least\n        // future events will be captured.\n        this.subscribeToEvents();\n      }\n    }\n\n    disconnectedCallback(): void {\n      // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.\n      if (this._ngElementStrategy) {\n        this._ngElementStrategy.disconnect();\n      }\n\n      if (this.ngElementEventsSubscription) {\n        this.ngElementEventsSubscription.unsubscribe();\n        this.ngElementEventsSubscription = null;\n      }\n    }\n\n    private subscribeToEvents(): void {\n      // Listen for events from the strategy and dispatch them as custom events.\n      this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n        const customEvent = createCustomEvent(this.ownerDocument!, e.name, e.value);\n        this.dispatchEvent(customEvent);\n      });\n    }\n  }\n\n  // Add getters and setters to the prototype for each property input.\n  inputs.forEach(({propName}) => {\n    Object.defineProperty(NgElementImpl.prototype, propName, {\n      get(): any {\n        return this.ngElementStrategy.getInputValue(propName);\n      },\n      set(newValue: any): void {\n        this.ngElementStrategy.setInputValue(propName, newValue);\n      },\n      configurable: true,\n      enumerable: true,\n    });\n  });\n\n  return (NgElementImpl as any) as NgElementConstructor<P>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n/**\n * @publicApi\n */\nexport const VERSION = new Version('11.0.5');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the `elements` package.\n */\nexport {createCustomElement, NgElement, NgElementConfig, NgElementConstructor, WithProperties} from './src/create-custom-element';\nexport {NgElementStrategy, NgElementStrategyEvent, NgElementStrategyFactory} from './src/element-strategy';\nexport {VERSION} from './src/version';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}