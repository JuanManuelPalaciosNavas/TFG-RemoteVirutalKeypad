{"ast":null,"code":"'use strict';\n\nvar Emitter = require('events').EventEmitter,\n    util = require('util'),\n    streams = require('../streams'),\n    Headers = require('./headers'),\n    Reader = require('./stream_reader');\n\nvar Base = function Base(request, url, options) {\n  Emitter.call(this);\n  Base.validateOptions(options || {}, ['maxLength', 'masking', 'requireMasking', 'protocols']);\n  this._request = request;\n  this._reader = new Reader();\n  this._options = options || {};\n  this._maxLength = this._options.maxLength || this.MAX_LENGTH;\n  this._headers = new Headers();\n  this.__queue = [];\n  this.readyState = 0;\n  this.url = url;\n  this.io = new streams.IO(this);\n  this.messages = new streams.Messages(this);\n\n  this._bindEventListeners();\n};\n\nutil.inherits(Base, Emitter);\n\nBase.validateOptions = function (options, validKeys) {\n  for (var key in options) {\n    if (validKeys.indexOf(key) < 0) throw new Error('Unrecognized option: ' + key);\n  }\n};\n\nvar instance = {\n  // This is 64MB, small enough for an average VPS to handle without\n  // crashing from process out of memory\n  MAX_LENGTH: 0x3ffffff,\n  STATES: ['connecting', 'open', 'closing', 'closed'],\n  _bindEventListeners: function _bindEventListeners() {\n    var self = this; // Protocol errors are informational and do not have to be handled\n\n    this.messages.on('error', function () {});\n    this.on('message', function (event) {\n      var messages = self.messages;\n      if (messages.readable) messages.emit('data', event.data);\n    });\n    this.on('error', function (error) {\n      var messages = self.messages;\n      if (messages.readable) messages.emit('error', error);\n    });\n    this.on('close', function () {\n      var messages = self.messages;\n      if (!messages.readable) return;\n      messages.readable = messages.writable = false;\n      messages.emit('end');\n    });\n  },\n  getState: function getState() {\n    return this.STATES[this.readyState] || null;\n  },\n  addExtension: function addExtension(extension) {\n    return false;\n  },\n  setHeader: function setHeader(name, value) {\n    if (this.readyState > 0) return false;\n\n    this._headers.set(name, value);\n\n    return true;\n  },\n  start: function start() {\n    if (this.readyState !== 0) return false;\n\n    var response = this._handshakeResponse();\n\n    if (!response) return false;\n\n    this._write(response);\n\n    if (this._stage !== -1) this._open();\n    return true;\n  },\n  text: function text(message) {\n    return this.frame(message);\n  },\n  binary: function binary(message) {\n    return false;\n  },\n  ping: function ping() {\n    return false;\n  },\n  pong: function pong() {\n    return false;\n  },\n  close: function close(reason, code) {\n    if (this.readyState !== 1) return false;\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n  _open: function _open() {\n    this.readyState = 1;\n\n    this.__queue.forEach(function (args) {\n      this.frame.apply(this, args);\n    }, this);\n\n    this.__queue = [];\n    this.emit('open', new Base.OpenEvent());\n  },\n  _queue: function _queue(message) {\n    this.__queue.push(message);\n\n    return true;\n  },\n  _write: function _write(chunk) {\n    var io = this.io;\n    if (io.readable) io.emit('data', chunk);\n  }\n};\n\nfor (var key in instance) {\n  Base.prototype[key] = instance[key];\n}\n\nBase.ConnectEvent = function () {};\n\nBase.OpenEvent = function () {};\n\nBase.CloseEvent = function (code, reason) {\n  this.code = code;\n  this.reason = reason;\n};\n\nBase.MessageEvent = function (data) {\n  this.data = data;\n};\n\nmodule.exports = Base;","map":{"version":3,"sources":["/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/websocket-driver/lib/websocket/driver/base.js"],"names":["Emitter","require","EventEmitter","util","streams","Headers","Reader","Base","request","url","options","call","validateOptions","_request","_reader","_options","_maxLength","maxLength","MAX_LENGTH","_headers","__queue","readyState","io","IO","messages","Messages","_bindEventListeners","inherits","validKeys","key","indexOf","Error","instance","STATES","self","on","event","readable","emit","data","error","writable","getState","addExtension","extension","setHeader","name","value","set","start","response","_handshakeResponse","_write","_stage","_open","text","message","frame","binary","ping","pong","close","reason","code","CloseEvent","forEach","args","apply","OpenEvent","_queue","push","chunk","prototype","ConnectEvent","MessageEvent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Emitter = require('events').EventEmitter,\n    util    = require('util'),\n    streams = require('../streams'),\n    Headers = require('./headers'),\n    Reader  = require('./stream_reader');\n\nvar Base = function(request, url, options) {\n  Emitter.call(this);\n  Base.validateOptions(options || {}, ['maxLength', 'masking', 'requireMasking', 'protocols']);\n\n  this._request   = request;\n  this._reader    = new Reader();\n  this._options   = options || {};\n  this._maxLength = this._options.maxLength || this.MAX_LENGTH;\n  this._headers   = new Headers();\n  this.__queue    = [];\n  this.readyState = 0;\n  this.url        = url;\n\n  this.io = new streams.IO(this);\n  this.messages = new streams.Messages(this);\n  this._bindEventListeners();\n};\nutil.inherits(Base, Emitter);\n\nBase.validateOptions = function(options, validKeys) {\n  for (var key in options) {\n    if (validKeys.indexOf(key) < 0)\n      throw new Error('Unrecognized option: ' + key);\n  }\n};\n\nvar instance = {\n  // This is 64MB, small enough for an average VPS to handle without\n  // crashing from process out of memory\n  MAX_LENGTH: 0x3ffffff,\n\n  STATES: ['connecting', 'open', 'closing', 'closed'],\n\n  _bindEventListeners: function() {\n    var self = this;\n\n    // Protocol errors are informational and do not have to be handled\n    this.messages.on('error', function() {});\n\n    this.on('message', function(event) {\n      var messages = self.messages;\n      if (messages.readable) messages.emit('data', event.data);\n    });\n\n    this.on('error', function(error) {\n      var messages = self.messages;\n      if (messages.readable) messages.emit('error', error);\n    });\n\n    this.on('close', function() {\n      var messages = self.messages;\n      if (!messages.readable) return;\n      messages.readable = messages.writable = false;\n      messages.emit('end');\n    });\n  },\n\n  getState: function() {\n    return this.STATES[this.readyState] || null;\n  },\n\n  addExtension: function(extension) {\n    return false;\n  },\n\n  setHeader: function(name, value) {\n    if (this.readyState > 0) return false;\n    this._headers.set(name, value);\n    return true;\n  },\n\n  start: function() {\n    if (this.readyState !== 0) return false;\n    var response = this._handshakeResponse();\n    if (!response) return false;\n    this._write(response);\n    if (this._stage !== -1) this._open();\n    return true;\n  },\n\n  text: function(message) {\n    return this.frame(message);\n  },\n\n  binary: function(message) {\n    return false;\n  },\n\n  ping: function() {\n    return false;\n  },\n\n  pong: function() {\n      return false;\n  },\n\n  close: function(reason, code) {\n    if (this.readyState !== 1) return false;\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n\n  _open: function() {\n    this.readyState = 1;\n    this.__queue.forEach(function(args) { this.frame.apply(this, args) }, this);\n    this.__queue = [];\n    this.emit('open', new Base.OpenEvent());\n  },\n\n  _queue: function(message) {\n    this.__queue.push(message);\n    return true;\n  },\n\n  _write: function(chunk) {\n    var io = this.io;\n    if (io.readable) io.emit('data', chunk);\n  }\n};\n\nfor (var key in instance)\n  Base.prototype[key] = instance[key];\n\n\nBase.ConnectEvent = function() {};\n\nBase.OpenEvent = function() {};\n\nBase.CloseEvent = function(code, reason) {\n  this.code   = code;\n  this.reason = reason;\n};\n\nBase.MessageEvent = function(data) {\n  this.data = data;\n};\n\nmodule.exports = Base;\n"]},"metadata":{},"sourceType":"script"}