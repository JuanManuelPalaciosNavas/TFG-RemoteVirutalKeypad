{"ast":null,"code":"'use strict';\n\nvar Response = require('http-response-object');\n\nvar handleQs = require('then-request/lib/handle-qs.js');\n\nmodule.exports = doRequest;\n\nfunction doRequest(method, url, options) {\n  var xhr = new XMLHttpRequest(); // check types of arguments\n\n  if (typeof method !== 'string') {\n    throw new TypeError('The method must be a string.');\n  }\n\n  if (typeof url !== 'string') {\n    throw new TypeError('The URL/path must be a string.');\n  }\n\n  if (options === null || options === undefined) {\n    options = {};\n  }\n\n  if (typeof options !== 'object') {\n    throw new TypeError('Options must be an object (or null).');\n  }\n\n  method = method.toUpperCase();\n  options.headers = options.headers || {}; // handle cross domain\n\n  var match;\n  var crossDomain = !!((match = /^([\\w-]+:)?\\/\\/([^\\/]+)/.exec(options.uri)) && match[2] != location.host);\n  if (!crossDomain) options.headers['X-Requested-With'] = 'XMLHttpRequest'; // handle query string\n\n  if (options.qs) {\n    url = handleQs(url, options.qs);\n  } // handle json body\n\n\n  if (options.json) {\n    options.body = JSON.stringify(options.json);\n    options.headers['content-type'] = 'application/json';\n  } // method, url, async\n\n\n  xhr.open(method, url, false);\n\n  for (var name in options.headers) {\n    xhr.setRequestHeader(name.toLowerCase(), options.headers[name]);\n  } // avoid sending empty string (#319)\n\n\n  xhr.send(options.body ? options.body : null);\n  var headers = {};\n  xhr.getAllResponseHeaders().split('\\r\\n').forEach(function (header) {\n    var h = header.split(':');\n\n    if (h.length > 1) {\n      headers[h[0].toLowerCase()] = h.slice(1).join(':').trim();\n    }\n  });\n  return new Response(xhr.status, headers, xhr.responseText);\n}","map":{"version":3,"sources":["/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/sync-request/browser.js"],"names":["Response","require","handleQs","module","exports","doRequest","method","url","options","xhr","XMLHttpRequest","TypeError","undefined","toUpperCase","headers","match","crossDomain","exec","uri","location","host","qs","json","body","JSON","stringify","open","name","setRequestHeader","toLowerCase","send","getAllResponseHeaders","split","forEach","header","h","length","slice","join","trim","status","responseText"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Response = require('http-response-object');\nvar handleQs = require('then-request/lib/handle-qs.js');\n\nmodule.exports = doRequest;\nfunction doRequest(method, url, options) {\n  var xhr = new XMLHttpRequest();\n\n  // check types of arguments\n\n  if (typeof method !== 'string') {\n    throw new TypeError('The method must be a string.');\n  }\n  if (typeof url !== 'string') {\n    throw new TypeError('The URL/path must be a string.');\n  }\n  if (options === null || options === undefined) {\n    options = {};\n  }\n  if (typeof options !== 'object') {\n    throw new TypeError('Options must be an object (or null).');\n  }\n  \n  method = method.toUpperCase();\n  options.headers = options.headers || {};\n\n  // handle cross domain\n\n  var match;\n  var crossDomain = !!((match = /^([\\w-]+:)?\\/\\/([^\\/]+)/.exec(options.uri)) && (match[2] != location.host));\n  if (!crossDomain) options.headers['X-Requested-With'] = 'XMLHttpRequest';\n\n  // handle query string\n  if (options.qs) {\n    url = handleQs(url, options.qs);\n  }\n\n  // handle json body\n  if (options.json) {\n    options.body = JSON.stringify(options.json);\n    options.headers['content-type'] = 'application/json';\n  }\n\n  // method, url, async\n  xhr.open(method, url, false);\n\n  for (var name in options.headers) {\n    xhr.setRequestHeader(name.toLowerCase(), options.headers[name]);\n  }\n\n  // avoid sending empty string (#319)\n  xhr.send(options.body ? options.body : null);\n\n\n  var headers = {};\n  xhr.getAllResponseHeaders().split('\\r\\n').forEach(function (header) {\n    var h = header.split(':');\n    if (h.length > 1) {\n      headers[h[0].toLowerCase()] = h.slice(1).join(':').trim();\n    }\n  });\n  return new Response(xhr.status, headers, xhr.responseText);\n}\n"]},"metadata":{},"sourceType":"script"}