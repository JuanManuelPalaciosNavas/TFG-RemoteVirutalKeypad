{"ast":null,"code":"'use strict';\n\nmodule.exports = Response;\n/**\n * A response from a web request\n *\n * @param {Number} statusCode\n * @param {Object} headers\n * @param {Buffer} body\n * @param {String} url\n */\n\nfunction Response(statusCode, headers, body, url) {\n  if (typeof statusCode !== 'number') {\n    throw new TypeError('statusCode must be a number but was ' + typeof statusCode);\n  }\n\n  if (headers === null) {\n    throw new TypeError('headers cannot be null');\n  }\n\n  if (typeof headers !== 'object') {\n    throw new TypeError('headers must be an object but was ' + typeof headers);\n  }\n\n  this.statusCode = statusCode;\n  this.headers = {};\n\n  for (var key in headers) {\n    this.headers[key.toLowerCase()] = headers[key];\n  }\n\n  this.body = body;\n  this.url = url;\n}\n\nResponse.prototype.getBody = function (encoding) {\n  if (this.statusCode >= 300) {\n    var err = new Error('Server responded with status code ' + this.statusCode + ':\\n' + this.body.toString());\n    err.statusCode = this.statusCode;\n    err.headers = this.headers;\n    err.body = this.body;\n    err.url = this.url;\n    throw err;\n  }\n\n  return encoding ? this.body.toString(encoding) : this.body;\n};","map":{"version":3,"sources":["/home/juanma/Documentos/TecladoVirtual/TFG Angular template/node_modules/http-response-object/index.js"],"names":["module","exports","Response","statusCode","headers","body","url","TypeError","key","toLowerCase","prototype","getBody","encoding","err","Error","toString"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,GAA7C,EAAkD;AAChD,MAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;AAClC,UAAM,IAAII,SAAJ,CAAc,yCAA0C,OAAOJ,UAA/D,CAAN;AACD;;AACD,MAAIC,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM,IAAIG,SAAJ,CAAc,wBAAd,CAAN;AACD;;AACD,MAAI,OAAOH,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,IAAIG,SAAJ,CAAc,uCAAwC,OAAOH,OAA7D,CAAN;AACD;;AACD,OAAKD,UAAL,GAAkBA,UAAlB;AACA,OAAKC,OAAL,GAAe,EAAf;;AACA,OAAK,IAAII,GAAT,IAAgBJ,OAAhB,EAAyB;AACvB,SAAKA,OAAL,CAAaI,GAAG,CAACC,WAAJ,EAAb,IAAkCL,OAAO,CAACI,GAAD,CAAzC;AACD;;AACD,OAAKH,IAAL,GAAYA,IAAZ;AACA,OAAKC,GAAL,GAAWA,GAAX;AACD;;AAEDJ,QAAQ,CAACQ,SAAT,CAAmBC,OAAnB,GAA6B,UAAUC,QAAV,EAAoB;AAC/C,MAAI,KAAKT,UAAL,IAAmB,GAAvB,EAA4B;AAC1B,QAAIU,GAAG,GAAG,IAAIC,KAAJ,CAAU,uCACF,KAAKX,UADH,GACgB,KADhB,GACwB,KAAKE,IAAL,CAAUU,QAAV,EADlC,CAAV;AAEAF,IAAAA,GAAG,CAACV,UAAJ,GAAiB,KAAKA,UAAtB;AACAU,IAAAA,GAAG,CAACT,OAAJ,GAAc,KAAKA,OAAnB;AACAS,IAAAA,GAAG,CAACR,IAAJ,GAAW,KAAKA,IAAhB;AACAQ,IAAAA,GAAG,CAACP,GAAJ,GAAU,KAAKA,GAAf;AACA,UAAMO,GAAN;AACD;;AACD,SAAOD,QAAQ,GAAG,KAAKP,IAAL,CAAUU,QAAV,CAAmBH,QAAnB,CAAH,GAAkC,KAAKP,IAAtD;AACD,CAXD","sourcesContent":["'use strict';\n\nmodule.exports = Response;\n\n/**\n * A response from a web request\n *\n * @param {Number} statusCode\n * @param {Object} headers\n * @param {Buffer} body\n * @param {String} url\n */\nfunction Response(statusCode, headers, body, url) {\n  if (typeof statusCode !== 'number') {\n    throw new TypeError('statusCode must be a number but was ' + (typeof statusCode));\n  }\n  if (headers === null) {\n    throw new TypeError('headers cannot be null');\n  }\n  if (typeof headers !== 'object') {\n    throw new TypeError('headers must be an object but was ' + (typeof headers));\n  }\n  this.statusCode = statusCode;\n  this.headers = {};\n  for (var key in headers) {\n    this.headers[key.toLowerCase()] = headers[key];\n  }\n  this.body = body;\n  this.url = url;\n}\n\nResponse.prototype.getBody = function (encoding) {\n  if (this.statusCode >= 300) {\n    var err = new Error('Server responded with status code '\n                    + this.statusCode + ':\\n' + this.body.toString());\n    err.statusCode = this.statusCode;\n    err.headers = this.headers;\n    err.body = this.body;\n    err.url = this.url;\n    throw err;\n  }\n  return encoding ? this.body.toString(encoding) : this.body;\n};\n"]},"metadata":{},"sourceType":"script"}